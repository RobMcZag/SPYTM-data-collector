plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version "6.2.0"
    id 'org.unbroken-dome.test-sets' version '2.2.1'
}

group 'com.robertozagni'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

project.ext {
    if (! project.hasProperty('sf_test_user')) { sf_test_user = System.getenv('sf_test_user') }
    if (! project.hasProperty('sf_test_pw')) { sf_test_pw = System.getenv('sf_test_pw') }
    if (! project.hasProperty('spytm_test_user')) { spytm_test_user = System.getenv('spytm_test_user') }
    if (! project.hasProperty('spytm_test_pw')) { spytm_test_pw = System.getenv('spytm_test_pw') }
    if (! project.hasProperty('spytm_prod_user')) { spytm_prod_user = System.getenv('spytm_prod_user') }
    if (! project.hasProperty('spytm_prod_pw')) { spytm_prod_pw = System.getenv('spytm_prod_pw') }
}

repositories {
    mavenCentral()
}

testSets {

    libraries { testHelpers }

    unitTest {
        imports testHelpers
    }
    integrationTest {
        dirName = 'test-integration'
        imports testHelpers
    }
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
}

dependencies {
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'  // for warning: unknown enum constant When.MAYBE
    implementation 'org.flywaydb:flyway-core:6.2.2'
    implementation 'com.opencsv:opencsv:5.1'
    implementation group: 'net.snowflake', name: 'snowflake-jdbc', version: '3.11.1'
    runtimeOnly 'com.h2database:h2'             // H2 in memory DB - for local running and tests
    runtimeOnly 'org.postgresql:postgresql'     // Postgress DB - for Prod and pre-prod Tests

    // testHelpersCompileOnly sourceSets.main.output

    testHelpersImplementation  sourceSets.main.output
    testHelpersImplementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation sourceSets.testHelpers.output
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    integrationTestImplementation   sourceSets.testHelpers.output

}

processResources {
    expand(project.properties)
}

tasks.withType(Test) {  // make all Test sets use JUnit 5 - 'test' would have used it for unit tests only :)
    useJUnitPlatform()
}

integrationTest {
    inputs.property "integration.date", LocalDate.now()     // Runs at least onces a day, as input is different
    shouldRunAfter(test)
}

check.dependsOn integrationTest         // To have integrationTests run during the build

flyway {    // To use Flyway targets from Gradle without running Spring Boot
    url = 'jdbc:postgresql://localhost:5432/spytm_test_db'
    user = project.properties.spytm_test_user
    password = project.properties.spytm_test_pw
    schemas = ['spytm']
}
